# 스도쿠 스페셜 저지출처분류
# 시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
# 1 초	256 MB	40607	12109	7667	28.511%
# 문제
# 스도쿠는 18세기 스위스 수학자가 만든 '라틴 사각형'이랑 퍼즐에서 유래한 것으로 현재 많은 인기를 누리고 있다. 이 게임은 아래 그림과 같이 가로, 세로 각각 9개씩 총 81개의 작은 칸으로 이루어진 정사각형 판 위에서 이뤄지는데, 게임 시작 전 일부 칸에는 1부터 9까지의 숫자 중 하나가 쓰여 있다.
#
#
#
# 나머지 빈 칸을 채우는 방식은 다음과 같다.
#
# 각각의 가로줄과 세로줄에는 1부터 9까지의 숫자가 한 번씩만 나타나야 한다.
# 굵은 선으로 구분되어 있는 3x3 정사각형 안에도 1부터 9까지의 숫자가 한 번씩만 나타나야 한다.
# 위의 예의 경우, 첫째 줄에는 1을 제외한 나머지 2부터 9까지의 숫자들이 이미 나타나 있으므로 첫째 줄 빈칸에는 1이 들어가야 한다.
#
#
#
# 또한 위쪽 가운데 위치한 3x3 정사각형의 경우에는 3을 제외한 나머지 숫자들이 이미 쓰여있으므로 가운데 빈 칸에는 3이 들어가야 한다.
#
#
#
# 이와 같이 빈 칸을 차례로 채워 가면 다음과 같은 최종 결과를 얻을 수 있다.
#
#
#
# 게임 시작 전 스도쿠 판에 쓰여 있는 숫자들의 정보가 주어질 때 모든 빈 칸이 채워진 최종 모습을 출력하는 프로그램을 작성하시오.
#
# 입력
# 아홉 줄에 걸쳐 한 줄에 9개씩 게임 시작 전 스도쿠판 각 줄에 쓰여 있는 숫자가 한 칸씩 띄워서 차례로 주어진다. 스도쿠 판의 빈 칸의 경우에는 0이 주어진다. 스도쿠 판을 규칙대로 채울 수 없는 경우의 입력은 주어지지 않는다.
#
# 출력
# 모든 빈 칸이 채워진 스도쿠 판의 최종 모습을 아홉 줄에 걸쳐 한 줄에 9개씩 한 칸씩 띄워서 출력한다.
#
# 스도쿠 판을 채우는 방법이 여럿인 경우는 그 중 하나만을 출력한다.
#
# 제한
# baekjoon의 백트래킹 알고리즘으로 풀 수 있는 입력만 주어진다. 다음은 그 알고리즘의 수행 시간이다.
# C++14: 80ms
# Java: 292ms
# PyPy3: 1172ms
# 예제 입력 1
# 0 3 5 4 6 9 2 7 8
# 7 8 2 1 0 5 6 0 9
# 0 6 0 2 7 8 1 3 5
# 3 2 1 0 4 6 8 9 7
# 8 0 4 9 1 3 5 0 6
# 5 9 6 8 2 0 4 1 3
# 9 1 7 6 5 2 0 8 0
# 6 0 3 7 0 1 9 5 2
# 2 5 8 3 9 4 7 6 0
# 예제 출력 1
# 1 3 5 4 6 9 2 7 8
# 7 8 2 1 3 5 6 4 9
# 4 6 9 2 7 8 1 3 5
# 3 2 1 5 4 6 8 9 7
# 8 7 4 9 1 3 5 2 6
# 5 9 6 8 2 7 4 1 3
# 9 1 7 6 5 2 3 8 4
# 6 4 3 7 8 1 9 5 2
# 2 5 8 3 9 4 7 6 1

def solution(s):
    # 무한반복
    while 1:

        # 0이 없으면 종료
        sum = 0
        for i in range(len(s)):
            for j in range(len(s[i])):
                sum += s[i][j]

        if sum == 405:
            break
        # 가로줄
        for i in s:
            array = [1, 2, 3, 4, 5, 6, 7, 8, 9]
            indexofj = 0
            for j in i:
                if j in array:
                    array.remove(j)
                if j == 0:
                    indexofj = i.index(j)
            if len(array) == 1:
                s[s.index(i)][indexofj] = array[0]

        # 세로줄
        # x,y 일때 y로반복
        for i in range(9):
            array = [1, 2, 3, 4, 5, 6, 7, 8, 9]

            indexofi = 0

            # x,y 일때 x 반복
            for j in s:

                if j[i] in array:
                    array.remove(j[i])
                if j[i] == 0:
                    indexofi = s.index(j)
            if len(array) == 1:
                s[indexofi][i] = array[0]

        # 사각형 채우기
        # 세칸씩 뛰면서
        for i in range(3):
            for j in range(3):
                array = [1, 2, 3, 4, 5, 6, 7, 8, 9]

                indexofi = 0
                indexofj = 0
                for x in range(3):
                    for y in range(3):

                        if s[x + i * 3][j * 3 + y] in array:
                            array.remove(s[x + i * 3][j * 3 + y])

                        if s[x + i * 3][j * 3 + y] == 0:
                            indexofi = x + i * 3
                            indexofj = y + j * 3
                if len(array) == 1:
                    s[indexofi][indexofj] = array[0]

    return s


s = [
    [0, 3, 5, 4, 6, 9, 2, 7, 8],
    [7, 8, 2, 1, 0, 5, 6, 0, 9],
    [0, 6, 0, 2, 7, 8, 1, 3, 5],
    [3, 2, 1, 0, 4, 6, 8, 9, 7],
    [8, 0, 4, 9, 1, 3, 5, 0, 6],
    [5, 9, 6, 8, 2, 0, 4, 1, 3],
    [9, 1, 7, 6, 5, 2, 0, 8, 0],
    [6, 0, 3, 7, 0, 1, 9, 5, 2],
    [2, 5, 8, 3, 9, 4, 7, 6, 0]
]

s = []
for _ in range(9):
    s.append(list(map(int, input().split())))

for i in solution(s):
    string = ''
    for j in i:
        string += str(j) + ' '
    print(string)
