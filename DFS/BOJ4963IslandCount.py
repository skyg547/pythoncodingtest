# 섬의 갯수
# 시간 제한	메모리 제한	제출	정답	맞은 사람	정답 비율
# 1 초	128 MB	30470	15278	10998	49.248%
# 문제
# 정사각형으로 이루어져 있는 섬과 바다 지도가 주어진다. 섬의 개수를 세는 프로그램을 작성하시오.
#
#
#
# 한 정사각형과 가로, 세로 또는 대각선으로 연결되어 있는 사각형은 걸어갈 수 있는 사각형이다.
#
# 두 정사각형이 같은 섬에 있으려면, 한 정사각형에서 다른 정사각형으로 걸어서 갈 수 있는 경로가 있어야 한다. 지도는 바다로 둘러싸여 있으며, 지도 밖으로 나갈 수 없다.
#
# 입력
# 입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 테스트 케이스의 첫째 줄에는 지도의 너비 w와 높이 h가 주어진다. w와 h는 50보다 작거나 같은 양의 정수이다.
#
# 둘째 줄부터 h개 줄에는 지도가 주어진다. 1은 땅, 0은 바다이다.
#
# 입력의 마지막 줄에는 0이 두 개 주어진다.
#
# 출력
# 각 테스트 케이스에 대해서, 섬의 개수를 출력한다.

import sys

input = sys.stdin.readline


def DFS(l, y, x, w, h):
    # 방문 처리
    l[y][x] = 0

    # 8방 탐색
    for i in range(8):
        # 배열의 범위를 벗어 나지 않는다면 ?
        if 0 <= (y + dx[i]) < h and 0 <= (x + dy[i]) < w:
            # 그리고 방문이 안되엇다면? dfs 방문
            if l[(y + dx[i])][(x + dy[i])] == 1:
                DFS(l, (y + dx[i]), (x + dy[i]), w, h)


def solution(w, h, l):
    global dx
    global dy
    # 답카운트
    ans = 0

    # 좌상,중상,우상,좌중,우중,좌하,중하,우하
    dx = [-1, 0, 1, -1, 1, -1, 0, 1]
    dy = [1, 1, 1, 0, 0, -1, -1, -1]

    # 지도르 다 살펴 보면서
    for y in range(h):
        for x in range(w):

            if l[y][x] == 1:
                # 탐색시작
                DFS(l, y, x, w, h)

                # 탐색후 섬 하나 추가
                ans += 1
    return ans


if __name__ == '__main__':
    w, h = 5, 4
    l = [
        [1, 0, 1, 0, 0],
        [1, 0, 0, 0, 0],
        [1, 0, 1, 0, 1],
        [1, 0, 0, 1, 0]
    ]

    while 1:
        w, h = map(int, input().split())
        if w == 0 and h == 0:
            break

        l = [list(map(int, input().split())) for _ in range(h)]
        print(solution(w, h, l))
